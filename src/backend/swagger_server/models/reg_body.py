# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RegBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, firstname: str=None, lastname: str=None, email: str=None, passwort: str=None):  # noqa: E501
        """RegBody - a model defined in Swagger

        :param benutzername: The benutzername of this RegBody.  # noqa: E501
        :type benutzername: str
        :param email: The email of this RegBody.  # noqa: E501
        :type email: str
        :param passwort: The passwort of this RegBody.  # noqa: E501
        :type passwort: str
        """
        self.swagger_types = {
            'firstname': str,
            'lastname': str,
            'email': str,
            'passwort': str
        }

        self.attribute_map = {
            'firstname': 'firstname',
            'lastname': 'lastname',
            'email': 'email',
            'passwort': 'passwort'
        }
        self._firstname = firstname
        self._lastname = lastname
        self._email = email
        self._passwort = passwort

    @classmethod
    def from_dict(cls, dikt) -> 'RegBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The reg_body of this RegBody.  # noqa: E501
        :rtype: RegBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def firstname(self) -> str:
        """Gets the benutzername of this RegBody.


        :return: The benutzername of this RegBody.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname: str):
        """Sets the benutzername of this RegBody.


        :param benutzername: The benutzername of this RegBody.
        :type benutzername: str
        """
        if firstname is None:
            raise ValueError("Invalid value for `benutzername`, must not be `None`")  # noqa: E501

        self._firstname = firstname

    @property
    def lastname(self) -> str:
        """Gets the benutzername of this RegBody.


        :return: The benutzername of this RegBody.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname: str):
        """Sets the benutzername of this RegBody.


        :param benutzername: The benutzername of this RegBody.
        :type benutzername: str
        """
        if lastname is None:
            raise ValueError("Invalid value for `benutzername`, must not be `None`")  # noqa: E501

        self._lastname = lastname

    @property
    def email(self) -> str:
        """Gets the email of this RegBody.


        :return: The email of this RegBody.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this RegBody.


        :param email: The email of this RegBody.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def passwort(self) -> str:
        """Gets the passwort of this RegBody.


        :return: The passwort of this RegBody.
        :rtype: str
        """
        return self._passwort

    @passwort.setter
    def passwort(self, passwort: str):
        """Sets the passwort of this RegBody.


        :param passwort: The passwort of this RegBody.
        :type passwort: str
        """
        if passwort is None:
            raise ValueError("Invalid value for `passwort`, must not be `None`")  # noqa: E501

        self._passwort = passwort
